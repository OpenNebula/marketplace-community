#!/usr/bin/env bash

# NGINX Web Server Appliance Installation Script
# Auto-generated by OpenNebula Docker Appliance Generator
# Docker Image: nginx:alpine

exec 1>&2
set -eux -o pipefail

export DEBIAN_FRONTEND=noninteractive

# Configuration from user input
DOCKER_IMAGE="nginx:alpine"
DEFAULT_CONTAINER_NAME="nginx-server"
DEFAULT_PORTS="80:80,443:443"
DEFAULT_ENV_VARS=""
DEFAULT_VOLUMES="/etc/nginx/conf.d:/etc/nginx/conf.d,/var/www/html:/usr/share/nginx/html"
APP_NAME="NGINX Web Server"

# Update system
apt-get update
apt-get upgrade -y

# Install Docker
apt-get install -y ca-certificates curl
install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
chmod a+r /etc/apt/keyrings/docker.asc

echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

apt-get update
apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# Enable and start Docker
systemctl enable docker
systemctl start docker

# Pull the user's Docker image
echo "Pulling Docker image: $DOCKER_IMAGE"
docker pull "$DOCKER_IMAGE"

# Create container startup script
cat > /usr/local/bin/start-nginx-container.sh << 'CONTAINER_SCRIPT'
#!/bin/bash

# Load OpenNebula context variables if available
if [ -f /var/lib/one-context/one_env ]; then
    source /var/lib/one-context/one_env
fi

# Use context variables or defaults
CONTAINER_NAME="${CONTAINER_NAME:-nginx-server}"
CONTAINER_PORTS="${CONTAINER_PORTS:-80:80,443:443}"
CONTAINER_ENV="${CONTAINER_ENV:-}"
CONTAINER_VOLUMES="${CONTAINER_VOLUMES:-/etc/nginx/conf.d:/etc/nginx/conf.d,/var/www/html:/usr/share/nginx/html}"

# Parse port mappings
parse_ports() {
    local ports="$1"
    local port_args=""
    if [ -n "$ports" ]; then
        IFS=',' read -ra PORT_ARRAY <<< "$ports"
        for port in "${PORT_ARRAY[@]}"; do
            port_args="$port_args -p $port"
        done
    fi
    echo "$port_args"
}

# Parse environment variables
parse_env() {
    local env_vars="$1"
    local env_args=""
    if [ -n "$env_vars" ]; then
        IFS=',' read -ra ENV_ARRAY <<< "$env_vars"
        for env in "${ENV_ARRAY[@]}"; do
            env_args="$env_args -e $env"
        done
    fi
    echo "$env_args"
}

# Parse volume mounts
parse_volumes() {
    local volumes="$1"
    local volume_args=""
    if [ -n "$volumes" ]; then
        IFS=',' read -ra VOL_ARRAY <<< "$volumes"
        for vol in "${VOL_ARRAY[@]}"; do
            host_path=$(echo "$vol" | cut -d':' -f1)
            mkdir -p "$host_path"
            volume_args="$volume_args -v $vol"
        done
    fi
    echo "$volume_args"
}

# Stop existing container if running
if docker ps -q -f name="$CONTAINER_NAME" | grep -q .; then
    echo "Stopping existing container: $CONTAINER_NAME"
    docker stop "$CONTAINER_NAME"
    docker rm "$CONTAINER_NAME"
fi

# Build docker run command
PORT_ARGS=$(parse_ports "$CONTAINER_PORTS")
ENV_ARGS=$(parse_env "$CONTAINER_ENV")
VOLUME_ARGS=$(parse_volumes "$CONTAINER_VOLUMES")

echo "Starting $CONTAINER_NAME container..."
docker run -d \
    --name "$CONTAINER_NAME" \
    --restart unless-stopped \
    $PORT_ARGS \
    $ENV_ARGS \
    $VOLUME_ARGS \
    "nginx:alpine"

if [ $? -eq 0 ]; then
    echo "✓ $CONTAINER_NAME started successfully"
    docker ps --filter name="$CONTAINER_NAME"
else
    echo "✗ Failed to start $CONTAINER_NAME"
    exit 1
fi
CONTAINER_SCRIPT

chmod +x /usr/local/bin/start-nginx-container.sh

# Create systemd service for the container
cat > /etc/systemd/system/nginx-container.service << 'SERVICE_EOF'
[Unit]
Description=NGINX Web Server Container Service
After=docker.service
Requires=docker.service
After=one-context.service
Wants=one-context.service

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/bin/start-nginx-container.sh
ExecStop=/usr/bin/docker stop nginx-server
ExecStopPost=/usr/bin/docker rm nginx-server
TimeoutStartSec=300
Restart=on-failure

[Install]
WantedBy=multi-user.target
SERVICE_EOF

systemctl enable nginx-container.service

# Configure VNC access
apt-get install -y ubuntu-desktop-minimal tightvncserver

# Configure auto-login
mkdir -p /etc/systemd/system/getty@tty1.service.d
cat > /etc/systemd/system/getty@tty1.service.d/override.conf << 'VNC_EOF'
[Service]
ExecStart=
ExecStart=-/sbin/agetty --noissue --autologin root %I $TERM
Type=idle
VNC_EOF

# Set root password for VNC
echo 'root:opennebula' | chpasswd

# Create welcome message
cat > /etc/profile.d/99-nginx-welcome.sh << 'WELCOME_EOF'
#!/bin/bash
case $- in
    *i*) ;;
      *) return;;
esac

echo "=================================================="
echo "  NGINX Web Server Appliance"
echo "=================================================="
echo "  Docker Image: nginx:alpine"
echo "  Container: nginx-server"
echo "  Ports: 80:80,443:443"
echo ""
echo "  Commands:"
echo "    docker ps                    - Show running containers"
echo "    docker logs nginx-server   - View container logs"
echo "    docker exec -it nginx-server /bin/bash - Access container"
echo ""
echo "  Web Interface: http://VM_IP:80"
echo ""
echo "  SSH Access: Enabled with OpenNebula context keys"
echo "  VNC Access: Available through OpenNebula"
echo "=================================================="
WELCOME_EOF

chmod +x /etc/profile.d/99-$APPLIANCE_NAME-welcome.sh

# Clean up
apt-get autoremove -y
apt-get autoclean
find /var/log -type f -exec truncate -s 0 {} \;

sync
