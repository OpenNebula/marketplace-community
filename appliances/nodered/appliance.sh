#!/usr/bin/env bash

# Node-Red Appliance Installation Script
# Auto-generated by OpenNebula Docker Appliance Generator
# Docker Image: nodered/node-red:latest

set -o errexit -o pipefail

# List of contextualization parameters
ONE_SERVICE_PARAMS=(
    'ONEAPP_CONTAINER_NAME'     'configure'  'Docker container name'                    'O|text'
    'ONEAPP_CONTAINER_PORTS'    'configure'  'Docker container port mappings'           'O|text'
    'ONEAPP_CONTAINER_ENV'      'configure'  'Docker container environment variables'   'O|text'
    'ONEAPP_CONTAINER_VOLUMES'  'configure'  'Docker container volume mappings'         'O|text'
)

# Configuration from user input
DOCKER_IMAGE="nodered/node-red:latest"
DEFAULT_CONTAINER_NAME="nodered-app"
DEFAULT_PORTS="1880:1880"
DEFAULT_ENV_VARS=""
DEFAULT_VOLUMES="/data:/data"
APP_NAME="Node-Red"
APPLIANCE_NAME="nodered"

### Appliance metadata ###############################################

# Appliance metadata
ONE_SERVICE_NAME='Node-Red'
ONE_SERVICE_VERSION='latest'   # Docker image tag
ONE_SERVICE_BUILD=$(date +%s)
ONE_SERVICE_SHORT_DESCRIPTION='Node-Red Docker Container Appliance'
ONE_SERVICE_DESCRIPTION='Node-Red running in Docker container'
ONE_SERVICE_RECONFIGURABLE=true

### Appliance functions ##############################################

service_cleanup()
{
    :
}

service_install()
{
    export DEBIAN_FRONTEND=noninteractive

# Update system
apt-get update
apt-get upgrade -y

# Install Docker
apt-get install -y ca-certificates curl
install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
chmod a+r /etc/apt/keyrings/docker.asc

echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

apt-get update
apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# Enable and start Docker
systemctl enable docker
systemctl start docker

# Pre-create the data directory
mkdir -p /data
chown 1000:1000 /data

# Pull Node-RED image during installation
msg info "Pulling Node-RED Docker image"
docker pull $DOCKER_IMAGE

# Verify the image was pulled
msg info "Verifying Node-RED image was pulled:"
docker images nodered/node-red

# Configure console auto-login
systemctl stop unattended-upgrades 2>/dev/null || true
systemctl disable unattended-upgrades 2>/dev/null || true
apt-get install -y mingetty
mkdir -p /etc/systemd/system/getty@tty1.service.d
cat > /etc/systemd/system/getty@tty1.service.d/override.conf << 'EOF'
[Service]
ExecStart=
ExecStart=-/sbin/agetty --noissue --autologin root %I $TERM
Type=idle
EOF

# Configure serial console and set root password
mkdir -p /etc/systemd/system/serial-getty@ttyS0.service.d
cat > /etc/systemd/system/serial-getty@ttyS0.service.d/override.conf << 'EOF'
[Service]
ExecStart=
ExecStart=-/sbin/agetty --noissue --autologin root %I 115200,38400,9600 vt102
Type=idle
EOF
echo 'root:opennebula' | chpasswd
systemctl enable getty@tty1.service serial-getty@ttyS0.service

# Create welcome message
cat > /etc/profile.d/99-nodered-welcome.sh << 'EOF'
#!/bin/bash
case $- in *i*) ;; *) return;; esac
echo "=================================================="
echo "  Node-RED Appliance - Container: nodered-app"
echo "  Commands: docker ps | docker logs nodered-app"
echo "=================================================="
EOF
chmod +x /etc/profile.d/99-nodered-welcome.sh

# Clean up
apt-get autoremove -y
apt-get autoclean
find /var/log -type f -exec truncate -s 0 {} \;

sync
}

service_configure()
{
    msg info "Starting Node-RED service configuration"

    # Verify Docker is running
    if ! systemctl is-active --quiet docker; then
        msg error "Docker service is not running"
        return 1
    fi

    msg info "✓ Docker service is running"
    return 0
}

service_bootstrap()
{
    msg info "Starting Node-RED service bootstrap"

    # Setup and start the Node-RED container
    setup_nodered_container

    return $?
}

# Setup Node-RED container
setup_nodered_container()
{
    local container_name="${ONEAPP_CONTAINER_NAME:-$DEFAULT_CONTAINER_NAME}"
    local container_ports="${ONEAPP_CONTAINER_PORTS:-$DEFAULT_PORTS}"
    local container_env="${ONEAPP_CONTAINER_ENV:-$DEFAULT_ENV_VARS}"
    local container_volumes="${ONEAPP_CONTAINER_VOLUMES:-$DEFAULT_VOLUMES}"

    msg info "Setting up Node-RED container: $container_name"

    # Stop and remove existing container if it exists
    if docker ps -a --format '{{.Names}}' | grep -q "^${container_name}$"; then
        msg info "Stopping existing container: $container_name"
        docker stop "$container_name" 2>/dev/null || true
        docker rm "$container_name" 2>/dev/null || true
    fi

    # Parse port mappings
    local port_args=""
    if [ -n "$container_ports" ]; then
        IFS=',' read -ra PORT_ARRAY <<< "$container_ports"
        for port in "${PORT_ARRAY[@]}"; do
            port_args="$port_args -p $port"
        done
    fi

    # Parse environment variables
    local env_args=""
    if [ -n "$container_env" ]; then
        IFS=',' read -ra ENV_ARRAY <<< "$container_env"
        for env in "${ENV_ARRAY[@]}"; do
            env_args="$env_args -e $env"
        done
    fi

    # Parse volume mounts
    local volume_args=""
    if [ -n "$container_volumes" ]; then
        IFS=',' read -ra VOL_ARRAY <<< "$container_volumes"
        for vol in "${VOL_ARRAY[@]}"; do
            local host_path=$(echo "$vol" | cut -d':' -f1)
            mkdir -p "$host_path"
            volume_args="$volume_args -v $vol"
        done
    fi

    # Start the container
    msg info "Starting Node-RED container with:"
    msg info "  Ports: $container_ports"
    msg info "  Environment: ${container_env:-none}"
    msg info "  Volumes: $container_volumes"

    docker run -d \
        --name "$container_name" \
        --restart unless-stopped \
        $port_args \
        $env_args \
        $volume_args \
        "$DOCKER_IMAGE" 2>&1 | while read line; do msg info "  $line"; done

    if [ $? -eq 0 ]; then
        msg info "✓ Node-RED container started successfully"

        # Wait for container to be healthy
        local max_attempts=30
        local attempt=0
        while [ $attempt -lt $max_attempts ]; do
            if docker ps --filter "name=$container_name" --format "{{.Status}}" | grep -q "Up"; then
                msg info "✓ Node-RED container is running"
                local status=$(docker ps --filter "name=$container_name" --format "{{.Status}}")
                msg info "  Status: $status"
                return 0
            fi
            attempt=$((attempt + 1))
            sleep 2
        done

        # Check if container stopped unexpectedly
        if docker ps -a --filter "name=$container_name" --format "{{.Status}}" | grep -q "Exited"; then
            msg error "✗ Node-RED container stopped unexpectedly"
            msg info "Container logs:"
            docker logs "$container_name" 2>&1 | tail -10 | while read line; do
                msg info "  $line"
            done
            return 1
        fi
    else
        msg error "✗ Failed to start Node-RED container"
        return 1
    fi
}
