#!/usr/bin/env bash

# Node-Red Appliance Installation Script
# Auto-generated by OpenNebula Docker Appliance Generator
# Docker Image: nodered/node-red:latest

set -o errexit -o pipefail

# List of contextualization parameters
ONE_SERVICE_PARAMS=(
    'ONEAPP_CONTAINER_NAME'     'configure'  'Docker container name'                    'O|text'
    'ONEAPP_CONTAINER_PORTS'    'configure'  'Docker container port mappings'           'O|text'
    'ONEAPP_CONTAINER_ENV'      'configure'  'Docker container environment variables'   'O|text'
    'ONEAPP_CONTAINER_VOLUMES'  'configure'  'Docker container volume mappings'         'O|text'
)

# Configuration from user input
DOCKER_IMAGE="nodered/node-red:latest"
DEFAULT_CONTAINER_NAME="nodered-app"
DEFAULT_PORTS="1880:1880"
DEFAULT_ENV_VARS=""
DEFAULT_VOLUMES="/data:/data"
APP_NAME="Node-Red"
APPLIANCE_NAME="nodered"

### Appliance metadata ###############################################

# Appliance metadata
ONE_SERVICE_NAME='Node-Red'
ONE_SERVICE_VERSION=   #latest
ONE_SERVICE_BUILD=$(date +%s)
ONE_SERVICE_SHORT_DESCRIPTION='Node-Red Docker Container Appliance'
ONE_SERVICE_DESCRIPTION='Node-Red running in Docker container'
ONE_SERVICE_RECONFIGURABLE=true

### Appliance functions ##############################################

service_cleanup()
{
    :
}

service_install()
{
    export DEBIAN_FRONTEND=noninteractive

# Update system
apt-get update
apt-get upgrade -y

# Install Docker
apt-get install -y ca-certificates curl
install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
chmod a+r /etc/apt/keyrings/docker.asc

echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

apt-get update
apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# Enable and start Docker
systemctl enable docker
systemctl start docker

# Pull the user's Docker image
echo "Pulling Docker image: $DOCKER_IMAGE"
docker pull "$DOCKER_IMAGE"

    # Create container startup script
    cat > /usr/local/bin/start-nodered-container.sh << 'CONTAINER_SCRIPT'
#!/bin/bash

# Load OpenNebula context variables if available
if [ -f /var/lib/one-context/one_env ]; then
    source /var/lib/one-context/one_env
fi

# Use context variables or defaults
CONTAINER_NAME="${CONTAINER_NAME:-nodered-app}"
CONTAINER_PORTS="${CONTAINER_PORTS:-1880:1880}"
CONTAINER_ENV="${CONTAINER_ENV:-}"
CONTAINER_VOLUMES="${CONTAINER_VOLUMES:-/data:/data}"

# Parse port mappings
parse_ports() {
    local ports="$1"
    local port_args=""
    if [ -n "$ports" ]; then
        IFS=',' read -ra PORT_ARRAY <<< "$ports"
        for port in "${PORT_ARRAY[@]}"; do
            port_args="$port_args -p $port"
        done
    fi
    echo "$port_args"
}

# Parse environment variables
parse_env() {
    local env_vars="$1"
    local env_args=""
    if [ -n "$env_vars" ]; then
        IFS=',' read -ra ENV_ARRAY <<< "$env_vars"
        for env in "${ENV_ARRAY[@]}"; do
            env_args="$env_args -e $env"
        done
    fi
    echo "$env_args"
}

# Parse volume mounts
parse_volumes() {
    local volumes="$1"
    local volume_args=""
    if [ -n "$volumes" ]; then
        IFS=',' read -ra VOL_ARRAY <<< "$volumes"
        for vol in "${VOL_ARRAY[@]}"; do
            host_path=$(echo "$vol" | cut -d':' -f1)
            mkdir -p "$host_path"
            volume_args="$volume_args -v $vol"
        done
    fi
    echo "$volume_args"
}

# Stop existing container if running
if docker ps -q -f name="$CONTAINER_NAME" | grep -q .; then
    echo "Stopping existing container: $CONTAINER_NAME"
    docker stop "$CONTAINER_NAME"
    docker rm "$CONTAINER_NAME"
fi

# Build docker run command
PORT_ARGS=$(parse_ports "$CONTAINER_PORTS")
ENV_ARGS=$(parse_env "$CONTAINER_ENV")
VOLUME_ARGS=$(parse_volumes "$CONTAINER_VOLUMES")

echo "Starting $CONTAINER_NAME container..."
docker run -d \
    --name "$CONTAINER_NAME" \
    --restart unless-stopped \
    $PORT_ARGS \
    $ENV_ARGS \
    $VOLUME_ARGS \
    "nodered/node-red:latest"

if [ $? -eq 0 ]; then
    echo "✓ $CONTAINER_NAME started successfully"
    docker ps --filter name="$CONTAINER_NAME"
else
    echo "✗ Failed to start $CONTAINER_NAME"
    exit 1
fi
CONTAINER_SCRIPT

    chmod +x /usr/local/bin/start-nodered-container.sh

    # Create systemd service for the container
    cat > /etc/systemd/system/nodered-container.service << 'SERVICE_EOF'
[Unit]
Description=Node-Red Container Service
After=docker.service
Requires=docker.service
After=one-context.service
Wants=one-context.service

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/bin/start-nodered-container.sh
ExecStop=/usr/bin/docker stop nodered-app
ExecStopPost=/usr/bin/docker rm nodered-app
TimeoutStartSec=300
Restart=on-failure

[Install]
WantedBy=multi-user.target
SERVICE_EOF

    systemctl enable nodered-container.service

    # Configure console access (lightweight alternative to VNC)
    # Stop unattended-upgrades to avoid package lock conflicts
    systemctl stop unattended-upgrades
    systemctl disable unattended-upgrades

    # Wait for any existing package operations to complete
    while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
        echo "Waiting for other package managers to finish..."
        sleep 5
    done

    # Install minimal packages for console access
    apt-get install -y mingetty

    # Configure auto-login on console
    mkdir -p /etc/systemd/system/getty@tty1.service.d
    cat > /etc/systemd/system/getty@tty1.service.d/override.conf << 'CONSOLE_EOF'
[Service]
ExecStart=
ExecStart=-/sbin/agetty --noissue --autologin root %I $TERM
Type=idle
CONSOLE_EOF

    # Configure auto-login on serial console as well
    mkdir -p /etc/systemd/system/serial-getty@ttyS0.service.d
    cat > /etc/systemd/system/serial-getty@ttyS0.service.d/override.conf << 'SERIAL_EOF'
[Service]
ExecStart=
ExecStart=-/sbin/agetty --noissue --autologin root %I 115200,38400,9600 vt102
Type=idle
SERIAL_EOF

    # Set root password for SSH access
    echo 'root:opennebula' | chpasswd

    # Enable console services
    systemctl enable getty@tty1.service
    systemctl enable serial-getty@ttyS0.service

    # Create welcome message
    cat > /etc/profile.d/99-nodered-welcome.sh << 'WELCOME_EOF'
#!/bin/bash
case $- in
    *i*) ;;
      *) return;;
esac

echo "=================================================="
echo "  Node-Red Appliance"
echo "=================================================="
echo "  Docker Image: nodered/node-red:latest"
echo "  Container: nodered-app"
echo "  Ports: 1880:1880"
echo ""
echo "  Commands:"
echo "    docker ps                    - Show running containers"
echo "    docker logs nodered-app   - View container logs"
echo "    docker exec -it nodered-app /bin/bash - Access container"
echo ""
echo "  Web Interface: http://VM_IP:1880"
echo ""
echo "  Access Methods:"
echo "    SSH: Enabled (password: 'opennebula' + context keys)"
echo "    Console: Auto-login as root (via OpenNebula console)"
echo "    Serial: Auto-login as root (via serial console)"
echo "=================================================="
WELCOME_EOF

    chmod +x /etc/profile.d/99-$APPLIANCE_NAME-welcome.sh

    # Clean up
    apt-get autoremove -y
    apt-get autoclean
    find /var/log -type f -exec truncate -s 0 {} \;

    sync

    return 0
}

service_configure()
{
    # Use context variables or defaults for container configuration
    CONTAINER_NAME="${ONEAPP_CONTAINER_NAME:-$DEFAULT_CONTAINER_NAME}"
    CONTAINER_PORTS="${ONEAPP_CONTAINER_PORTS:-$DEFAULT_PORTS}"
    CONTAINER_ENV="${ONEAPP_CONTAINER_ENV:-$DEFAULT_ENV_VARS}"
    CONTAINER_VOLUMES="${ONEAPP_CONTAINER_VOLUMES:-$DEFAULT_VOLUMES}"

    # Update the container startup script with context values
    sed -i "s/CONTAINER_NAME=\"\${CONTAINER_NAME:-.*}\"/CONTAINER_NAME=\"\${CONTAINER_NAME:-$CONTAINER_NAME}\"/" /usr/local/bin/start-$APPLIANCE_NAME-container.sh
    sed -i "s/CONTAINER_PORTS=\"\${CONTAINER_PORTS:-.*}\"/CONTAINER_PORTS=\"\${CONTAINER_PORTS:-$CONTAINER_PORTS}\"/" /usr/local/bin/start-$APPLIANCE_NAME-container.sh
    sed -i "s/CONTAINER_ENV=\"\${CONTAINER_ENV:-.*}\"/CONTAINER_ENV=\"\${CONTAINER_ENV:-$CONTAINER_ENV}\"/" /usr/local/bin/start-$APPLIANCE_NAME-container.sh
    sed -i "s/CONTAINER_VOLUMES=\"\${CONTAINER_VOLUMES:-.*}\"/CONTAINER_VOLUMES=\"\${CONTAINER_VOLUMES:-$CONTAINER_VOLUMES}\"/" /usr/local/bin/start-$APPLIANCE_NAME-container.sh

    return 0
}

service_bootstrap()
{
    # Start the container service
    systemctl start $APPLIANCE_NAME-container.service
    systemctl enable $APPLIANCE_NAME-container.service

    return 0
}
